{"version":3,"sources":["webpack:///src/app/pages/local-weather/local-weather.page.html","webpack:///src/app/pages/local-weather/local-weather.module.ts","webpack:///src/app/pages/local-weather/local-weather.page.scss","webpack:///src/app/pages/local-weather/local-weather.page.ts"],"names":["routes","path","component","LocalWeatherPageModule","imports","forChild","declarations","LocalWeatherPage","navCtrl","translate","weatherService","storage","locationList","city","state","get","then","val","location","JSON","parse","getWeather","set","stringify","subscribe","weather","selector","template"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUf,UAAMA,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;UAiBaC,sBAAsB;AAAA;AAAA,O;;AAAtBA,4BAAsB,6DAVlC,+DAAS;AACRC,eAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,oEAAgBC,QAAhB,EAJO,EAKP,6DAAaA,QAAb,CAAsBL,MAAtB,CALO,CADD;AAQRM,oBAAY,EAAE,CAAC,oEAAD;AARN,OAAT,CAUkC,GAAtBH,sBAAsB,CAAtB;;;;;;;;;;;;;;;;AC3Bb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCUFI,gBAAgB;AAe3B,kCACSC,OADT,EAEUC,SAFV,EAGUC,cAHV,EAIUC,OAJV,EAI0B;AAAA;;AAHjB,eAAAH,OAAA,GAAAA,OAAA;AACC,eAAAC,SAAA,GAAAA,SAAA;AACA,eAAAC,cAAA,GAAAA,cAAA;AACA,eAAAC,OAAA,GAAAA,OAAA;AAZH,eAAAC,YAAA,GAA2B,CAChC;AAAEC,gBAAI,EAAE,aAAR;AAAuBC,iBAAK,EAAE;AAA9B,WADgC,EAEhC;AAAED,gBAAI,EAAE,OAAR;AAAiBC,iBAAK,EAAE;AAAxB,WAFgC,EAGhC;AAAED,gBAAI,EAAE,UAAR;AAAoBC,iBAAK,EAAE;AAA3B,WAHgC,EAIhC;AAAED,gBAAI,EAAE,SAAR;AAAmBC,iBAAK,EAAE;AAA1B,WAJgC,EAKhC;AAAED,gBAAI,EAAE,WAAR;AAAqBC,iBAAK,EAAE;AAA5B,WALgC,CAA3B;AAaF;;AApBsB;AAAA;AAAA,qCAsBhB;AAAA;;AACT,iBAAKH,OAAL,CAAaI,GAAb,CAAiB,UAAjB,EAA6BC,IAA7B,CAAkC,UAACC,GAAD,EAAS;AACzC,kBAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChB,qBAAI,CAACC,QAAL,GAAgBC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAhB;AACD,eAFD,MAEO;AACL,qBAAI,CAACC,QAAL,GAAgB;AACdJ,uBAAK,EAAE,IADO;AAEdD,sBAAI,EAAE;AAFQ,iBAAhB;AAID;;AAED,mBAAI,CAACQ,UAAL,CAAgB,KAAI,CAACH,QAArB;AAED,aAZD;AAaD;AApC0B;AAAA;AAAA,qCAsChBA,QAtCgB,EAsCN;AAAA;;AACnB,gBAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChC,mBAAKA,QAAL,GAAgBC,IAAI,CAACC,KAAL,CAAWF,QAAX,CAAhB;AACD,aAFD,MAEO;AACL,mBAAKA,QAAL,GAAgBA,QAAhB;AACD;;AAED,iBAAKP,OAAL,CAAaW,GAAb,CAAiB,UAAjB,EAA6BH,IAAI,CAACI,SAAL,CAAe,KAAKL,QAApB,CAA7B;AAEA,iBAAKR,cAAL,CAAoBW,UAApB,CAA+B,KAAKH,QAAL,CAAcJ,KAA7C,EAAoD,KAAKI,QAAL,CAAcL,IAAlE,EAAwEW,SAAxE,CAAkF,UAACC,OAAD,EAAkB;AAClG,oBAAI,CAACA,OAAL,GAAeA,OAAf;AACD,aAFD;AAGD;AAlD0B;;AAAA;AAAA,S;;;;gBATpB;;gBACA;;gBAAmB;;gBACnB;;;;AAOIlB,sBAAgB,6DAL5B,gEAAU;AACTmB,gBAAQ,EAAE,mBADD;AAETC,gBAAQ,EAAR;AAAA;AAAA,kHAFS;;;;AAAA,OAAV,CAK4B,GAAhBpB,gBAAgB,CAAhB","file":"pages-local-weather-local-weather-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>{{ 'app.pages.localweather.title.header' | translate }}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding animated fadeIn\\\">\\n\\n  <ion-card class=\\\"ion-no-margin ion-margin-bottom bg-primary\\\">\\n    <ion-card-content class=\\\"ion-no-padding\\\">\\n  \\n      <ion-item>\\n        <ion-label class=\\\"text-1x fw700\\\">\\n          <ion-text color=\\\"light\\\">{{ 'app.label.selectlocal' | translate }}</ion-text>\\n        </ion-label>\\n        <ion-select [(ngModel)]=\\\"location\\\" (ionChange)=\\\"getWeather(location)\\\">\\n          <ion-select-option *ngFor=\\\"let location of locationList\\\" [value]=\\\"location\\\">\\n            <ion-text color=\\\"light\\\">{{ location.city }}</ion-text>\\n          </ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n  \\n    </ion-card-content>\\n  </ion-card>\\n  \\n  <ion-card class=\\\"ion-no-margin bg-white\\\">\\n    <ion-card-content class=\\\"ion-no-padding\\\">\\n    <ion-grid class=\\\"ion-padding\\\" *ngIf=\\\"weather\\\">\\n      <ion-row>\\n        <ion-col size=\\\"6\\\">\\n          <h1 class=\\\"location text-dark\\\">{{weather.name}}</h1>\\n          <!-- <div class=\\\"icon\\\"><img src=\\\"{{weather.icon_url}}\\\" alt=\\\"weather\\\"></div> -->\\n          <h3 class=\\\"desc\\\"> {{weather.weather[0].description}}</h3>\\n          <h1 class=\\\"temp\\\"><strong>{{weather.main.temp - 273.15 | number:'1.0-0'}}&deg;</strong></h1>\\n        </ion-col>\\n      </ion-row>\\n      <ion-row>\\n        <ion-col size=\\\"12\\\">\\n          <ion-list>\\n    \\n            <ion-item>\\n              <strong>{{ 'app.pages.localweather.label.temp' | translate }}: </strong> {{weather.weather[0].main}}\\n            </ion-item>\\n            <ion-item>\\n              <strong>{{ 'app.pages.localweather.label.humidity' | translate }}: </strong> {{weather.main.humidity}}\\n            </ion-item>\\n            <ion-item>\\n              <strong>{{ 'app.pages.localweather.label.dewpoint' | translate }}: </strong> {{weather.main.pressure}}\\n            </ion-item>\\n            <ion-item>\\n              <strong>{{ 'app.pages.localweather.label.visibility' | translate }}: </strong> {{weather.visibility}}\\n            </ion-item>\\n            <ion-item>\\n              <strong>{{ 'app.pages.localweather.label.heatindex' | translate }}: </strong> {{weather.clouds.all}}\\n            </ion-item>\\n    \\n          </ion-list>\\n        </ion-col>\\n      </ion-row>\\n    </ion-grid>\\n    </ion-card-content>\\n  </ion-card>\\n\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { LocalWeatherPage } from './local-weather.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LocalWeatherPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TranslateModule.forChild(),\n    RouterModule.forChild(routes)\n  ],\n  declarations: [LocalWeatherPage]\n})\nexport class LocalWeatherPageModule {}\n","export default \":host ion-content {\\n  --background: linear-gradient(-135deg, var(--ion-color-medium), var(--ion-color-light)) ;\\n}\\n\\nion-select {\\n  --color: var(--ion-color-light);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvbG9jYWwtd2VhdGhlci9sb2NhbC13ZWF0aGVyLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDRTtFQUNFLHdGQUFBO0FBQUo7O0FBSUE7RUFDSSwrQkFBQTtBQURKIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvbG9jYWwtd2VhdGhlci9sb2NhbC13ZWF0aGVyLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcbiAgaW9uLWNvbnRlbnQge1xuICAgIC0tYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KC0xMzVkZWcsIHZhcigtLWlvbi1jb2xvci1tZWRpdW0pLCB2YXIoLS1pb24tY29sb3ItbGlnaHQpKVxuICB9XG59XG5cbmlvbi1zZWxlY3Qge1xuICAgIC0tY29sb3I6IHZhcigtLWlvbi1jb2xvci1saWdodCk7XG59Il19 */\";","import { Component, OnInit } from '@angular/core';\nimport { NavController } from '@ionic/angular';\nimport { TranslateProvider, WeatherService } from '../../providers';\nimport { Storage } from '@ionic/storage';\n\n@Component({\n  selector: 'app-local-weather',\n  templateUrl: './local-weather.page.html',\n  styleUrls: ['./local-weather.page.scss'],\n})\nexport class LocalWeatherPage implements OnInit {\n  weather: any;\n  location: {\n    state: string,\n    city: string\n  }\n\n  public locationList: Array<any> = [\n    { city: 'Los Angeles', state: 'US' },\n    { city: 'Miami', state: 'US' },\n    { city: 'New York', state: 'US' },\n    { city: 'Seattle', state: 'US' },\n    { city: 'SÃ£o Paulo', state: 'BR' }\n  ];\n\n  constructor(\n    public navCtrl: NavController,\n    private translate: TranslateProvider,\n    private weatherService: WeatherService,\n    private storage: Storage\n  ) { }\n\n  ngOnInit() {\n    this.storage.get('location').then((val) => {\n      if (val !== null) {\n        this.location = JSON.parse(val);\n      } else {\n        this.location = {\n          state: 'US',\n          city: 'New York'\n        }\n      }\n\n      this.getWeather(this.location)\n\n    });\n  }\n\n  getWeather(location) {\n    if (typeof location === 'string') {\n      this.location = JSON.parse(location);\n    } else {\n      this.location = location;\n    }\n\n    this.storage.set('location', JSON.stringify(this.location));\n\n    this.weatherService.getWeather(this.location.state, this.location.city).subscribe((weather: any) => {\n      this.weather = weather;\n    });\n  }\n\n}\n"]}